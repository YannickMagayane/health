import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  FlatList,
  Alert,
  ScrollView,
  TouchableOpacity,
  Modal,
  Platform,
} from 'react-native';
// Removed AsyncStorage direct import
import { Picker } from '@react-native-picker/picker';
import * as Clipboard from 'expo-clipboard';
import { COLORS, FONT_SIZES, SPACING, GlobalStyles } from '../styles/theme';
import * as MedicalResultsService from '../services/medicalResultsService'; // Import service

const CATEGORIES = ["Sanguin", "Urinaire", "Imagerie", "Cardiologie", "Endocrinologie", "Autre"];

const MedicalResultsScreen = ({ navigation }) => {
  const [results, setResults] = useState([]);
  const [isAddModalVisible, setIsAddModalVisible] = useState(false);

  const [analysisName, setAnalysisName] = useState('');
  const [analysisDate, setAnalysisDate] = useState(new Date().toISOString().split('T')[0]);
  const [category, setCategory] = useState(CATEGORIES[0]);
  const [details, setDetails] = useState('');
  const [fileName, setFileName] = useState('');

  const loadResultsData = useCallback(async () => {
    const loadedResults = await MedicalResultsService.getMedicalResults();
    setResults(loadedResults);
  }, []);

  useEffect(() => {
    loadResultsData();
  }, [loadResultsData]);

  const handleAddResult = async () => {
    if (!analysisName.trim() || !analysisDate.trim()) {
      Alert.alert('Erreur', 'Veuillez entrer le nom et la date de l\'analyse.');
      return;
    }
    const newResultData = {
      // ID is generated by the service
      name: analysisName.trim(),
      date: analysisDate.trim(),
      category: category,
      details: details.trim(),
      simulatedFile: fileName.trim(),
    };

    const updatedResults = await MedicalResultsService.addMedicalResult(newResultData);
    if (updatedResults) {
      setResults(updatedResults);
      setAnalysisName('');
      setAnalysisDate(new Date().toISOString().split('T')[0]);
      setCategory(CATEGORIES[0]);
      setDetails('');
      setFileName('');
      setIsAddModalVisible(false);
      Alert.alert('Succès', 'Résultat médical enregistré.');
    } else {
      Alert.alert('Erreur', 'Impossible d\'enregistrer le résultat médical.');
    }
  };

  const handleSimulateFileUpload = () => {
    Alert.alert(
      "Simulation d'Upload",
      "La sélection de fichiers sera bientôt disponible. Entrez un nom de fichier manuellement.",
      [{ text: "OK" }]
    );
  };

  const handleSimulateExport = async (item) => {
    const resultDetails = `
Analyse: ${item.name}
Date: ${new Date(item.date).toLocaleDateString()}
Catégorie: ${item.category}
Détails: ${item.details || 'N/A'}
Fichier (simulé): ${item.simulatedFile || 'N/A'}
    `;
    try {
      await Clipboard.setStringAsync(resultDetails.trim());
      Alert.alert('Export Simulé', 'Les détails du résultat ont été copiés.');
    } catch (e) {
      Alert.alert('Erreur', "Impossible de copier.");
    }
  };

  const renderResultItem = ({ item }) => (
    <View style={styles.resultItem}>
      <Text style={styles.resultName}>{item.name} <Text style={styles.resultCategory}>({item.category})</Text></Text>
      <Text style={styles.resultDateText}>Date: {new Date(item.date).toLocaleDateString()}</Text>
      {item.details ? <Text style={styles.resultDetailsText}>Détails: {item.details}</Text> : null}
      {item.simulatedFile ? <Text style={styles.resultFileText}>Fichier: {item.simulatedFile}</Text> : null}
      <TouchableOpacity style={[GlobalStyles.button, styles.exportButton]} onPress={() => handleSimulateExport(item)}>
          <Text style={GlobalStyles.buttonText}>Exporter (Sim.)</Text>
      </TouchableOpacity>
    </View>
  );

  return (
    <View style={styles.screenContainer}>
      <TouchableOpacity style={[GlobalStyles.button, styles.addResultButton]} onPress={() => setIsAddModalVisible(true)}>
          <Text style={GlobalStyles.buttonText}>Ajouter un Résultat Médical</Text>
      </TouchableOpacity>

      <Modal
        visible={isAddModalVisible}
        animationType="slide"
        onRequestClose={() => setIsAddModalVisible(false)}
      >
        <ScrollView style={GlobalStyles.modalContainer}>
          <Text style={styles.modalTitle}>Ajouter un Nouveau Résultat</Text>
          <Text style={GlobalStyles.label}>Nom de l'analyse:</Text>
          <TextInput
            style={GlobalStyles.input}
            placeholder="Ex: Prise de sang annuelle"
            value={analysisName}
            onChangeText={setAnalysisName}
          />
          <Text style={GlobalStyles.label}>Date de l'analyse:</Text>
          <TextInput
            style={GlobalStyles.input}
            placeholder="YYYY-MM-DD"
            value={analysisDate}
            onChangeText={setAnalysisDate}
          />
          <Text style={GlobalStyles.label}>Catégorie:</Text>
          <View style={styles.pickerWrapper}>
            <Picker
              selectedValue={category}
              onValueChange={(itemValue) => setCategory(itemValue)}
              style={styles.pickerStyle}
              itemStyle={styles.pickerItemStyle}
            >
              {CATEGORIES.map(cat => <Picker.Item key={cat} label={cat} value={cat} />)}
            </Picker>
          </View>
          <Text style={GlobalStyles.label}>Détails / Notes:</Text>
          <TextInput
            style={[GlobalStyles.input, styles.multilineInput]}
            placeholder="Entrez les détails ici..."
            value={details}
            onChangeText={setDetails}
            multiline
            numberOfLines={4}
          />
          <Text style={GlobalStyles.label}>Nom du fichier (simulé):</Text>
          <TextInput
            style={GlobalStyles.input}
            placeholder="Ex: radio_poumons_2023.pdf"
            value={fileName}
            onChangeText={setFileName}
          />
          <TouchableOpacity style={[GlobalStyles.button, styles.uploadButton]} onPress={handleSimulateFileUpload}>
            <Text style={GlobalStyles.buttonText}>Simuler l'Ajout de Fichier</Text>
          </TouchableOpacity>

          <View style={styles.modalActions}>
            <TouchableOpacity style={[GlobalStyles.button, styles.saveModalButton]} onPress={handleAddResult}>
                <Text style={GlobalStyles.buttonText}>Enregistrer</Text>
            </TouchableOpacity>
            <TouchableOpacity style={[GlobalStyles.button, styles.cancelModalButton]} onPress={() => setIsAddModalVisible(false)}>
                <Text style={GlobalStyles.buttonText}>Annuler</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </Modal>

      <Text style={GlobalStyles.sectionTitle}>Historique des Résultats</Text>
      <FlatList
        data={results}
        renderItem={renderResultItem}
        keyExtractor={(item) => item.id}
        ListEmptyComponent={<Text style={styles.emptyListText}>Aucun résultat médical enregistré.</Text>}
        contentContainerStyle={{ paddingBottom: SPACING.large }}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  screenContainer: {
    ...GlobalStyles.container,
  },
  modalTitle: {
    ...GlobalStyles.titleText,
    textAlign: 'center',
    marginBottom: SPACING.large,
  },
  multilineInput: {
    minHeight: 100,
    textAlignVertical: 'top',
  },
  pickerWrapper: {
    backgroundColor: COLORS.white,
    borderWidth: 1,
    borderColor: COLORS.mediumGray,
    borderRadius: 8,
    marginBottom: SPACING.medium,
    height: Platform.OS === 'ios' ? 120 : 60,
    justifyContent: 'center',
  },
  pickerStyle: {
  },
  pickerItemStyle: {
    height:120,
    fontSize: FONT_SIZES.medium,
  },
  modalActions: {
    marginTop: SPACING.medium,
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  saveModalButton: {
      flex: 1,
      marginRight: SPACING.small,
      backgroundColor: COLORS.success,
  },
  cancelModalButton: {
      flex: 1,
      marginLeft: SPACING.small,
      backgroundColor: COLORS.danger,
  },
  addResultButton:{
    marginBottom: SPACING.medium,
  },
  uploadButton: {
    backgroundColor: COLORS.accent,
    marginBottom: SPACING.large,
  },
  resultItem: {
    backgroundColor: COLORS.white,
    padding: SPACING.medium,
    borderRadius: 8,
    marginBottom: SPACING.medium,
    borderWidth: 1,
    borderColor: COLORS.lightGray,
    shadowColor: COLORS.black,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.08,
    shadowRadius: 4,
    elevation: 2,
  },
  resultName: {
    fontSize: FONT_SIZES.large,
    fontWeight: 'bold',
    color: COLORS.primary,
    marginBottom: SPACING.xsmall,
  },
  resultCategory: {
    fontSize: FONT_SIZES.medium,
    fontWeight: 'normal',
    color: COLORS.darkGray,
  },
  resultDateText: {
    fontSize: FONT_SIZES.medium,
    color: COLORS.darkGray,
    opacity: 0.8,
    marginBottom: SPACING.small,
  },
  resultDetailsText: {
    fontSize: FONT_SIZES.medium,
    color: COLORS.darkGray,
    marginBottom: SPACING.small,
  },
  resultFileText: {
    fontSize: FONT_SIZES.medium,
    color: COLORS.accent,
    fontStyle: 'italic',
    marginBottom: SPACING.medium,
  },
  exportButton: {
    backgroundColor: COLORS.secondary,
    paddingVertical: SPACING.small,
  },
  emptyListText: {
    textAlign: 'center',
    marginTop: SPACING.large,
    fontSize: FONT_SIZES.medium,
    color: COLORS.darkGray,
  }
});

export default MedicalResultsScreen;
